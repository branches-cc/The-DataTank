%class SQLgrammar
%start filterresult

statementBetweenCommas = '(' filterresult/res ')'
                {$$ = $res;}
            | fullExpression/res
                {$$ = $res;}
            .

statement = filterresult/res
                {$$ = $res;}
            | fullExpression/res
                {$$ = $res;}
            .


filterresult = selectfromstatement {$$ = $1;}
             | unionstatement {$$ = $1;/*TODO*/}
             .

unionstatement = expression/expr1 UNION expression/expr2 
                { throw new Exception("Union is not supported yet..."); /*TODO*/}
               .

selectfromstatement = SELECT uniquefilter/distinct selectcolumnlist/selecttables FROM fromtables/fromtable wherefilter/where groupfilter/groupby orderbyfilter/orderby limitfilter/limit
                        {// 1) fromtables
                         // 2) wherefilter (if defined)
                         // 3) groupbyfilter (if defined)
                         // 4) selecttables (if not '*')
                         // 5) distinctfilter (if defined)
                        
                        $totalfilter=$fromtable;
                        $totalfilter=putFilterAfterIfExists($totalfilter, $where);
                        $totalfilter=putFilterAfterIfExists($totalfilter, $groupby);
                        $totalfilter=putFilterAfterIfExists($totalfilter, $selecttables);
                        $totalfilter=putFilterAfterIfExists($totalfilter, $distinct);
                        $totalfilter=putFilterAfterIfExists($totalfilter, $orderby);
                        $totalfilter=putFilterAfterIfExists($totalfilter, $limit);
                        
                        $$=$totalfilter;}
                    .

uniquefilter = DISTINCT {$$ = new DistinctFilter();}
             | {$$ = null;}
             . 

wherefilter = WHERE expression/expr {$$ = new FilterByExpressionFilter($expr);}
            | {$$ = null;}
            .

groupfilter = GROUP BY identifierlist/groupFields havingfilter/having 
                   {$$ = putFilterAfterIfExists(new DataGrouper($groupFields), $having);}
           |  {$$ = null;}
           .

havingfilter = HAVING expression/expr {$$ = new FilterByExpressionFilter($expr);}
             | {$$ = null;}
             .

limitfilter = LIMIT constant/limit 
               {$$ = new LimitFilter(null, 0, $limit);}
            | LIMIT constant/limit OFFSET constant/offset 
               {$$ = new LimitFilter(null, $offset, $limit);}
            |  {$$ = null;}
            .

orderbyfilter = ORDER BY orderbyidentifierlist/columns
                    { $$ = new SortFieldsFilter($columns);}
              | {$$ = null;}
              .

orderbyidentifierlist = orderbyfield/f
                        { $$ = array($f); }
                      | orderbyfield/f ',' orderbyidentifierlist/flist 
                        { array_unshift($flist, $f); $$ = $flist; }
                      .

orderbyfield = name/fieldname ASC
                    { $$ = new SortFieldsFilterColumn(new Identifier($fieldname), SortFieldsFilterColumn::$SORTORDER_ASCENDING); }
             | name/fieldname DESC
                    { $$ = new SortFieldsFilterColumn(new Identifier($fieldname), SortFieldsFilterColumn::$SORTORDER_DESCENDING); }
             | name/fieldname
                    { $$ = new SortFieldsFilterColumn(new Identifier($fieldname));}
             .

fromtables = fromtableexpression
               {$$ = $1;}
            | fromtables/tab1 ',' fromtableexpression/tab2
               {$$ = new DatasetJoinFilter(FALSE, FALSE, $tab1, $tab2, null);}
            .

fromtableexpression = '(' fromtableexpression/tab ')'
                        {$$ = $tab;}
                    | identifier 
                        {$$ = new Identifier($1);}
                    | '(' expressionEndswithAlias/tab ')' {$$ = $tab;}
                    | identifier/stat asopt allowedalias/tablealias
                        {$$ = putFilterAfterIfExists(new Identifier($stat), new TableAliasFilter($tablealias));}
                    .


selectcolumnlist =  listofcolumns {$$ = new ColumnSelectionFilter($1);}
                .

listofcolumns = expression/expr 
                {$$ = array(new ColumnSelectionFilterColumn($expr, null));}
          | expression/expr asopt allowedalias/alias 
                {$$ = array(new ColumnSelectionFilterColumn($expr, $alias));}
          | expression/expr ',' listoftables/arr 
                {array_unshift($arr, new ColumnSelectionFilterColumn($expr, null));$$ = $arr;}
          | expression/expr asopt allowedalias/alias ',' listofcolumns/arr 
                {array_unshift($arr, new ColumnSelectionFilterColumn($expr, $alias));$$ = $arr;}
          .
          
constantlist = constant {$$ = array(new Constant($1));}
             | constant ',' constantlist/arr {array_unshift($arr, new Constant($1));$$ = $arr;}
             .

asopt = AS | .

fullExpression = expression
                 {$$=$1;}
               | expressionEndswithAlias
                 {$$=$1;}
               .

expression = expressionA  {$$ = $1;}
           | expressionA/a BETWEEN expressionD/b AND expressionD/c 
                 {$$ = CombinedFilterGenerators::makeBetweenFilter($a,$b,$c);}
           | expressionA IN '(' constantlist/constantlist ')' 
                 {$$ = putFilterAfterIfExists($1, new CheckInFunction($constantlist));}
           .

expressionEndswithAlias = 
            expressionWithAlias/a INNER JOIN expressionWithAlias/b ON expressionA/c
                 {$$ = new DatasetJoinFilter(FALSE, FALSE, $a, $b, $c);}
           | expressionWithAlias/a LEFT JOIN expressionWithAlias/b ON expressionA/c 
                 {$$ = new DatasetJoinFilter(TRUE, FALSE, $a, $b, $c);}
           | expressionWithAlias/a RIGHT JOIN expressionWithAlias/b ON expressionA/c 
                 {$$ = new DatasetJoinFilter(FALSE, TRUE, $a, $b, $c);}
           | expressionWithAlias/a FULL JOIN expressionWithAlias/b ON expressionA/c 
                 {$$ = new DatasetJoinFilter(TRUE, TRUE, $a, $b, $c);}
           | expressionWithAlias/a CROSS JOIN expressionWithAlias/b
                 {$$ = new DatasetJoinFilter(FALSE, FALSE, $a, $b, null);}
            .

expressionWithAlias = expressionA {$$=$1;}
                    | expressionA/stat AS allowedalias/alias 
                      {$$ = $$ = putFilterAfterIfExists($stat, new TableAliasFilter($alias));}
                    . 

expressionA = expressionAB/a '|' expressionA/b 
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_CONCAT, $a, $b);}
            | expressionAB {$$ = $1;}
            .
            
expressionAB = expressionB/a OR expressionAB/b 
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_OR, $a, $b);}
            | expressionB {$$ = $1;}
            .
            
expressionB = expressionC/a AND expressionB/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_AND, $a, $b);}
            | expressionC {$$ = $1;}
            .
            
expressionC = expressionD/a '=' expressionD/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_COMPARE_EQUAL, $a, $b);}
            | expressionD/a '<' expressionD/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_COMPARE_SMALLER_THAN, $a, $b);}
            | expressionD/a '>' expressionD/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_COMPARE_LARGER_THAN, $a, $b);}
            | expressionD/a '<' '=' expressionD/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_COMPARE_SMALLER_OR_EQUAL_THAN, $a, $b);}
            | expressionD/a '>' '=' expressionD/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_COMPARE_LARGER_OR_EQUAL_THAN, $a, $b);}
            | expressionD/a '<' '>' expressionD/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_COMPARE_NOTEQUAL, $a, $b);}
            | expressionD/a '<' ALL expressionD/b
                {$$ = CombinedFilterGenerators::makeSmallerThanAllOrAnyFilter($a,$b);}
            | expressionD/a '<' '=' ALL expressionD/b
                {$$ = CombinedFilterGenerators::makeSmallerThanAllOrAnyFilter($a,$b,false);}
            | expressionD/a '<' ANY expressionD/b
                {$$ = CombinedFilterGenerators::makeSmallerThanAllOrAnyFilter($a,$b, true, false);}
            | expressionD/a '<' '=' ANY expressionD/b
                {$$ = CombinedFilterGenerators::makeSmallerThanAllOrAnyFilter($a,$b, false, false);}
            | expressionD/a '>' ALL expressionD/b
                {$$ = CombinedFilterGenerators::makeLargerThanAllOrAnyFilter($a,$b);}
            | expressionD/a '>' '=' ALL expressionD/b
                {$$ = CombinedFilterGenerators::makeLargerThanAllOrAnyFilter($a,$b, false);}
            | expressionD/a '>' ANY expressionD/b
                {$$ = CombinedFilterGenerators::makeLargerThanAllOrAnyFilter($a,$b, true, false);}
            | expressionD/a '>' '=' ANY expressionD/b
                {$$ = CombinedFilterGenerators::makeLargerThanAllOrAnyFilter($a,$b, false, false);}
            | expressionD/a '!' '=' expressionD/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_COMPARE_NOTEQUAL, $a, $b);}
            | expressionD/expr LIKE likeexpression/likeexpr
                 {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_MATCH_REGEX, $expr, new Constant(convertRegexFromSQLToUniversal($likeexpr)));}
            | expressionD
                {$$ = $1;}
            .

expressionD = expressionE/a '+' expressionD/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_PLUS, $a, $b);}
            | expressionE/a '-' expressionD/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_MINUS, $a, $b);}
            | expressionE
                {$$ = $1;}
            .

expressionE = expressionF/a '*' expressionE/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_MULTIPLY, $a, $b);}
            | expressionF/a '/' expressionE/b
                {$$ = new BinaryFunction(BinaryFunction::$FUNCTION_BINARY_DIVIDE, $a, $b);}
            | expressionF 
                {$$ = $1;}
            .

expressionF = endexpression {$$ = $1;}
            .

endexpression = identifier 
                {$$ = new Identifier($1);}
            | constant 
                {$$ = new Constant($1);}
            | identifier/functid '(' ')'
                {$$ = getNularyFilterForSQLFunction($functid);}
            | EXTRACT '(' extractconstant/constant FROM statement/arg ')'
                {$$ = getExtractFunction($arg, getExtractConstant($constant));}
            | DATE_ADD '(' statementBetweenCommas/date ',' INTERVAL statementBetweenCommas/interval extractconstant/constant ')'
                {$$ = getDateAddFunction(true, $date, $interval, getExtractConstant($constant));}
            | DATE_SUB '(' statementBetweenCommas/date ',' INTERVAL statementBetweenCommas/interval extractconstant/constant ')'
                {$$ = getDateAddFunction(false, $date, $interval, getExtractConstant($constant));}
            | identifier/functid '(' statementBetweenCommas/arg1 ')' 
                {$$ = getUnaryFilterForSQLFunction($functid, $arg1);}
            | identifier/functid '(' statementBetweenCommas/arg1 ',' statementBetweenCommas/arg2 ')'
                {$$ = getBinaryFunctionForSQLFunction($functid, $arg1, $arg2);}
            | identifier/functid '(' statementBetweenCommas/arg1 ',' statementBetweenCommas/arg2 ',' statementBetweenCommas/arg3 ')'
                {$$ =getTertaryFunctionForSQLFunction($functid, $arg1, $arg2, $arg3);}
            | identifier/functid '(' statementBetweenCommas/arg1 ',' statementBetweenCommas/arg2 ',' statementBetweenCommas/arg3 ',' statementBetweenCommas/arg4 ')'
                {$$ =getQuadernaryFunctionForSQLFunction($functid, $arg1, $arg2, $arg3, $arg4);}
            | '(' statement/stat ')'
                {$$ = $stat;}
            .

likeexpression = constant {$$ = $1;}
               .

identifierlist = identifier {$$ = array(new Identifier($1));}
               | identifier ',' identifierlist/arr {array_unshift($arr, new Identifier($1));$$=$arr;}
               .

allowedalias = name {$$=$1;}
             .

identifier = name {$$=$1;} 
           | '*' {$$="*";} 
           .

extractconstant = 
    SECOND {$$=DateTimeExtractConstants::$EXTRACT_SECOND;} |
    MINUTE {$$=DateTimeExtractConstants::$EXTRACT_MINUTE;} |
    HOUR {$$=DateTimeExtractConstants::$EXTRACT_HOUR;} |
    DAY {$$=DateTimeExtractConstants::$EXTRACT_DAY;} |
    WEEK {$$=DateTimeExtractConstants::$EXTRACT_WEEK;} |
    MONTH {$$=DateTimeExtractConstants::$EXTRACT_MONTH;} |
    YEAR {$$=DateTimeExtractConstants::$EXTRACT_YEAR;} |
    MINUTE_SECOND {$$=DateTimeExtractConstants::$EXTRACT_MINUTE_SECOND;} |
    HOUR_SECOND {$$=DateTimeExtractConstants::$EXTRACT_HOUR_SECOND;} |
    HOUR_MINUTE {$$=DateTimeExtractConstants::$EXTRACT_HOUR_MINUTE;} |
    DAY_SECOND {$$=DateTimeExtractConstants::$EXTRACT_DAY_SECOND;} |
    DAY_MINUTE {$$=DateTimeExtractConstants::$EXTRACT_DAY_MINUTE;} |
    DAY_HOUR {$$=DateTimeExtractConstants::$EXTRACT_DAY_HOUR;} |
    YEAR_MONTH {$$=DateTimeExtractConstants::$EXTRACT_YEAR_MONTH;}
    .