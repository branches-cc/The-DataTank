<?php

/**
 * Executes the ColumnSelectionFilter filter
 * 
 * @package The-Datatank/universalfilter/interpreter/executers
 * @copyright (C) 2012 by iRail vzw/asbl
 * @license AGPLv3
 * @author Jeroen Penninck
 */
class ColumnSelectionFilterExecuter extends UniversalFilterNodeExecuter {
    
    public function initExpression(UniversalFilterNode $filter, Environment $topenv, IInterpreter $interpreter) {
        throw new Exception("A ColumnSelectionFilter can not be evaluated.");
    }
    
    public function execute(UniversalFilterNode $filter, IInterpreter $interpreter) {
        //get source environment
        $executer = $interpreter->findExecuterFor($filter->getSource());
        $environment = $executer->execute($filter->getSource(), $interpreter);
        
        //the table generated by the last executer
        $sourcetable = $environment->getTable();
        
        // create a new environment to give each column (once for each row)
        $newEnv=$environment->newModifiableEnvironment();
        
        //get the columns to filter
        $columnInterpreters = $filter->getColumnData();
        
        //do it for each row, so create a new header which tells that
        $singleRowHeader = $sourcetable->getHeader()->cloneHeader();
        $singleRowHeader->setIsSingleRowByConstruction(true);
        
        
        //create a new empty table of the same size.
        $newRows = array();
        foreach($sourcetable->getContent()->getRows() as $row){
            array_push($newRows, new UniversalFilterTableContentRow());
        }
        
        // the header for the returned table:
        $columns = array();
        
        
        //loop all columns
        foreach($columnInterpreters as $column){
            //this column
            $filterColumn =$column->getColumn();
            //find something to evaluate it
            $exprexec = $interpreter->findExecuterFor($filterColumn);
            
            //the name for the column
            $columnAlias = $column->getAlias();
            
            //init and request the header
            $singleRowTable = new UniversalFilterTable($singleRowHeader, new UniversalFilterTableContent(array()));//no rows
            $newEnv->setTable($singleRowTable);
            
            $exprexec->initExpression($filterColumn, $newEnv, $interpreter);
            $header = $exprexec->getExpressionHeader();
            
            //check header
            if(!$header->isSingleRowByConstruction()){
                throw new Exception("Not a valid column-expression in column selection filter!");
            }
            
            //column information
            $columnInfo = $header->getColumnInformationById($header->getColumnId());
            
            //add the new column
            array_push($columns, $columnInfo);
            
            //loop all rows
            foreach($sourcetable->getContent()->getRows() as $index => $row){
                // make a table with only this row
                $singleRowTable = new UniversalFilterTable($singleRowHeader, new UniversalFilterTableContent(array($row)));
                $newEnv->setTable($singleRowTable);

                //request the content
                $anwser = $exprexec->evaluateAsExpression();
                
                //get the column
                $rows = $anwser->getRows();
                $anwserrow = $rows[0];
                
                //copy the value in the row
                $anwserrow->copyValueTo($newRows[$index], $header->getColumnId(), $header->getColumnId());
            }
            
            //set column alias
            if($columnAlias!=null){
                $columnInfo->aliasColumn($columnAlias);
            }
        }
        
        
        //the new header
        $newTableHeader=new UniversalFilterTableHeader($columns, false, false);
        
        //the new table
        $newtable = new UniversalFilterTable($newTableHeader, new UniversalFilterTableContent($newRows));
        
        //add it to the environment
        $environment->setTable($newtable);
        
        return $environment;
    }
}

?>
