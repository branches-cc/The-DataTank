<?php

/**
 * Executes the ColumnSelectionFilter filter
 * 
 * @package The-Datatank/universalfilter/interpreter/executers
 * @copyright (C) 2012 We Open Data
 * @license AGPLv3
 * @author Jeroen Penninck
 */
class ColumnSelectionFilterExecuter extends UniversalFilterNodeExecuter {
    
    public function initExpression(UniversalFilterNode $filter, Environment $topenv, IInterpreter $interpreter) {
        throw new Exception("A ColumnSelectionFilter can not be evaluated.");
    }
    
    public function execute(UniversalFilterNode $filter, IInterpreter $interpreter) {
        //get source environment
        $executer = $interpreter->findExecuterFor($filter->getSource());
        $environment = $executer->execute($filter->getSource(), $interpreter);
        
        //the table generated by the last executer
        $sourcetable = $environment->getTable();
        
        // create a new environment to give each column (once for each row)
        $newEnv=$environment->newModifiableEnvironment();
        
        //get the columns to filter
        $columnInterpreters = $filter->getColumnData();
        
        //do it for each row, so create a new header which tells that
        $singleRowHeader = $sourcetable->getHeader()->cloneHeader();
        $singleRowHeader->setIsSingleRowByConstruction(true);
        
        
        //create a new empty table of the same size.
        $newRows = new UniversalFilterTableContent();
        for ($index = 0; $index < $sourcetable->getContent()->getRowCount(); $index++) {
            $newRows->addRow(new UniversalFilterTableContentRow());
        }
        
        // the header for the returned table:
        $columns = array();
        
        
        //loop all columns
        foreach($columnInterpreters as $column){
            //this column
            $filterColumn =$column->getColumn();
            //find something to evaluate it
            $exprexec = $interpreter->findExecuterFor($filterColumn);
            
            //the name for the column
            $columnAlias = $column->getAlias();
            
            //init and request the header
            $singleRowTable = new UniversalFilterTable($singleRowHeader, new UniversalFilterTableContent());//no rows
            $newEnv->setTable($singleRowTable);
            
            $exprexec->initExpression($filterColumn, $newEnv, $interpreter);
            $header = $exprexec->getExpressionHeader();
            
            //check header
            if(!$header->isSingleRowByConstruction()){
                throw new Exception("Not a valid column-expression in column selection filter!");
            }
            
            for ($resultColumnIndex = 0; $resultColumnIndex < $header->getColumnCount(); $resultColumnIndex++) {
                //column information
                $columnId = $header->getColumnIdByIndex($resultColumnIndex);
                $columnInfo = $header->getColumnInformationById($columnId)->cloneColumnInfo();
                
                //set column alias
                if($columnAlias!=null){
                    if($header->isSingleColumnByConstruction()){
                        $columnInfo->aliasColumn($columnAlias);
                    }else{
                        //crashes if more than one column given...
                        throw new Exception("Column-alias not supported for *!");
                    }
                }

                //add the new column
                array_push($columns, $columnInfo);

                $oldContent = $sourcetable->getContent();
                $newContent = new UniversalFilterTableContent();

                //make a table with only one row (to give to the expression)
                $singleRowContent = new UniversalFilterTableContent();
                $singleRowContent->addRow(new UniversalFilterTableContent());
                $singleRowTable = new UniversalFilterTable($singleRowHeader, $singleRowContent);
                $newEnv->setTable($singleRowTable);

                //loop all rows
                for ($index = 0; $index < $oldContent->getRowCount(); $index++) {
                    $row = $oldContent->getRow($index);

                    // change the row in the table...
                    $singleRowContent->setRow(0, $row);

                    //request the content
                    $anwser = $exprexec->evaluateAsExpression();

                    //get the column
                    $anwserrow = $anwser->getRow(0);

                    //copy the value in the row
                    $anwserrow->copyValueTo($newRows->getRow($index), $columnId, $columnId);
                }
            }
        }
        
        
        //the new header
        $newTableHeader=new UniversalFilterTableHeader($columns, false, false);
        
        //the new table
        $newtable = new UniversalFilterTable($newTableHeader, $newRows);
        
        //add it to the environment
        $environment->setTable($newtable);
        
        return $environment;
    }
}

?>
